

import React, { useEffect } from 'react';
import { EditIcon, ClipboardIcon, CheckIcon } from './Icons';

interface MarkdownRendererProps {
  content: string;
  theme?: 'light' | 'dark';
  onEditMermaid?: (mermaidCode: string, blockIndex: number) => void;
  onCopyMermaid?: (mermaidCode: string, blockIndex: number) => void;
  copiedBlock?: number | null;
}

// Extend the Window interface to include mermaid
declare global {
    interface Window {
        mermaid?: any;
    }
}


const MarkdownRenderer: React.FC<MarkdownRendererProps> = ({ content, theme = 'dark', onEditMermaid, onCopyMermaid, copiedBlock }) => {
  useEffect(() => {
    if (window.mermaid) {
      try {
        window.mermaid.initialize({ startOnLoad: false, theme: theme === 'dark' ? 'dark' : 'default' });
        window.mermaid.run({ querySelector: '.mermaid' });
      } catch (error) {
          console.error("Mermaid rendering failed:", error);
          // This prevents the app from crashing if a diagram is invalid on initial render.
          // The diagram simply won't appear, or will show an error generated by mermaid.
      }
    }
  }, [content, theme]);
    
  const renderContent = () => {
    const lines = content.split('\n');
    const elements: React.ReactNode[] = [];
    let inCodeBlock = false;
    let codeBlockContent = '';
    let codeLang = '';
    let listItems: string[] = [];
    let mermaidBlockIndex = -1;

    const flushList = () => {
      if (listItems.length > 0) {
        elements.push(
          <ul key={`ul-${elements.length}`} className="list-disc list-inside space-y-2 my-4 pl-4 text-foreground">
            {listItems.map((item, i) => (
              <li key={`li-${i}`}>{item}</li>
            ))}
          </ul>
        );
        listItems = [];
      }
    };

    const renderMermaidBlock = (code: string, key: string) => {
        mermaidBlockIndex++;
        const currentBlockIndex = mermaidBlockIndex;
        const currentCode = code.trim();
        elements.push(
           <div key={key} className="relative group my-4">
               <div className="mermaid p-4 bg-accent rounded-md flex justify-center border border-border">
                   {currentCode}
               </div>
               <div className="absolute top-2 right-2 flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity focus-within:opacity-100">
                   {onCopyMermaid && (
                       <button 
                           onClick={() => onCopyMermaid(currentCode, currentBlockIndex)}
                           className="p-1.5 bg-secondary hover:bg-secondary/80 rounded-md text-secondary-foreground focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-accent focus-visible:ring-ring"
                           aria-label="Copy Diagram Code"
                       >
                          {copiedBlock === currentBlockIndex ? <CheckIcon className="w-5 h-5 text-green-500" /> : <ClipboardIcon className="w-5 h-5" />}
                       </button>
                   )}
                   {onEditMermaid && (
                       <button 
                           onClick={() => onEditMermaid(currentCode, currentBlockIndex)}
                           className="p-1.5 bg-secondary hover:bg-secondary/80 rounded-md text-secondary-foreground focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-accent focus-visible:ring-ring"
                           aria-label="Edit Diagram"
                       >
                          <EditIcon className="w-5 h-5" />
                       </button>
                   )}
               </div>
           </div>
       );
    };

    lines.forEach((line, index) => {
      if (line.startsWith('```')) {
        flushList();
        if (inCodeBlock) {
          if (codeLang === 'mermaid') {
             renderMermaidBlock(codeBlockContent, `mermaid-wrapper-${index}`);
          } else {
             elements.push(
                <pre key={`code-${index}`} className="bg-secondary p-4 rounded-md overflow-x-auto my-4 border border-border">
                  <code className={`language-${codeLang} text-secondary-foreground`}>{codeBlockContent.trim()}</code>
                </pre>
              );
          }
          codeBlockContent = '';
          codeLang = '';
          inCodeBlock = false;
        } else {
          inCodeBlock = true;
          codeLang = line.substring(3).trim();
        }
        return;
      }

      if (inCodeBlock) {
        codeBlockContent += line + '\n';
        return;
      }
      
      if (line.trim().startsWith('* ') || line.trim().startsWith('- ')) {
        listItems.push(line.trim().substring(2));
      } else {
        flushList();
        if (line.startsWith('# ')) {
          elements.push(<h1 key={index} className="text-3xl font-bold mt-6 mb-3 text-foreground">{line.substring(2)}</h1>);
        } else if (line.startsWith('## ')) {
          elements.push(<h2 key={index} className="text-2xl font-bold mt-5 mb-3 text-primary">{line.substring(3)}</h2>);
        } else if (line.startsWith('### ')) {
          elements.push(<h3 key={index} className="text-xl font-semibold mt-4 mb-2 text-foreground">{line.substring(4)}</h3>);
        } else if (line.trim() !== '') {
           elements.push(<p key={index} className="my-3 text-foreground leading-relaxed">{line}</p>);
        }
      }
    });

    flushList();

    if (inCodeBlock) {
        if (codeLang === 'mermaid') {
            renderMermaidBlock(codeBlockContent, 'mermaid-wrapper-final');
        } else {
            elements.push(
                <pre key={`code-final`} className="bg-secondary p-4 rounded-md overflow-x-auto my-4 border border-border">
                <code className={`language-${codeLang} text-secondary-foreground`}>{codeBlockContent.trim()}</code>
                </pre>
            );
        }
    }
    
    return elements;
  };

  return <div className="prose dark:prose-invert max-w-none">{renderContent()}</div>;
};

export default MarkdownRenderer;